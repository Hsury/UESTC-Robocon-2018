# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_swig_control', [dirname(__file__)])
        except ImportError:
            import _swig_control
            return _swig_control
        if fp is not None:
            try:
                _mod = imp.load_module('_swig_control', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _swig_control = swig_import_helper()
    del swig_import_helper
else:
    import _swig_control
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def getCurrentTime():
    return _swig_control.getCurrentTime()
getCurrentTime = _swig_control.getCurrentTime

def RAD2ANG(rad):
    return _swig_control.RAD2ANG(rad)
RAD2ANG = _swig_control.RAD2ANG

def ANG2RAD(ang):
    return _swig_control.ANG2RAD(ang)
ANG2RAD = _swig_control.ANG2RAD

def SQUARE(x):
    return _swig_control.SQUARE(x)
SQUARE = _swig_control.SQUARE

def MY_SQRT(x):
    return _swig_control.MY_SQRT(x)
MY_SQRT = _swig_control.MY_SQRT

def MY_SIN(x):
    return _swig_control.MY_SIN(x)
MY_SIN = _swig_control.MY_SIN

def MY_COS(x):
    return _swig_control.MY_COS(x)
MY_COS = _swig_control.MY_COS

def MY_ACOS(x):
    return _swig_control.MY_ACOS(x)
MY_ACOS = _swig_control.MY_ACOS

def MY_MAX(a, b):
    return _swig_control.MY_MAX(a, b)
MY_MAX = _swig_control.MY_MAX

def MY_ABS(x):
    return _swig_control.MY_ABS(x)
MY_ABS = _swig_control.MY_ABS
class point_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_control.new_point_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["x"] = _swig_control.point_t_x_set
    __swig_getmethods__["x"] = _swig_control.point_t_x_get
    if _newclass:
        x = _swig_property(_swig_control.point_t_x_get, _swig_control.point_t_x_set)
    __swig_setmethods__["y"] = _swig_control.point_t_y_set
    __swig_getmethods__["y"] = _swig_control.point_t_y_get
    if _newclass:
        y = _swig_property(_swig_control.point_t_y_get, _swig_control.point_t_y_set)
    __swig_setmethods__["ang"] = _swig_control.point_t_ang_set
    __swig_getmethods__["ang"] = _swig_control.point_t_ang_get
    if _newclass:
        ang = _swig_property(_swig_control.point_t_ang_get, _swig_control.point_t_ang_set)

    def printPoint(self):
        return _swig_control.point_t_printPoint(self)
    __swig_destroy__ = _swig_control.delete_point_t
    __del__ = lambda self: None
point_t_swigregister = _swig_control.point_t_swigregister
point_t_swigregister(point_t)

class vect_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vect_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vect_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_control.new_vect_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["s"] = _swig_control.vect_t_s_set
    __swig_getmethods__["s"] = _swig_control.vect_t_s_get
    if _newclass:
        s = _swig_property(_swig_control.vect_t_s_get, _swig_control.vect_t_s_set)
    __swig_setmethods__["e"] = _swig_control.vect_t_e_set
    __swig_getmethods__["e"] = _swig_control.vect_t_e_get
    if _newclass:
        e = _swig_property(_swig_control.vect_t_e_get, _swig_control.vect_t_e_set)

    def printVect(self):
        return _swig_control.vect_t_printVect(self)
    __swig_destroy__ = _swig_control.delete_vect_t
    __del__ = lambda self: None
vect_t_swigregister = _swig_control.vect_t_swigregister
vect_t_swigregister(vect_t)


def SetPoint(p_point, x, y, ang):
    return _swig_control.SetPoint(p_point, x, y, ang)
SetPoint = _swig_control.SetPoint

def set_vect(p_vect, p_start, p_end):
    return _swig_control.set_vect(p_vect, p_start, p_end)
set_vect = _swig_control.set_vect

def get_foot_point(p_vect, p0, foot_point):
    return _swig_control.get_foot_point(p_vect, p0, foot_point)
get_foot_point = _swig_control.get_foot_point

def p2v_vertical_dist(p_vect, p0):
    return _swig_control.p2v_vertical_dist(p_vect, p0)
p2v_vertical_dist = _swig_control.p2v_vertical_dist

def p2v_parallel_dist(p_vect, p0):
    return _swig_control.p2v_parallel_dist(p_vect, p0)
p2v_parallel_dist = _swig_control.p2v_parallel_dist

def get_vect_len(p_vect):
    return _swig_control.get_vect_len(p_vect)
get_vect_len = _swig_control.get_vect_len

def get_point_dis(p1, p2):
    return _swig_control.get_point_dis(p1, p2)
get_point_dis = _swig_control.get_point_dis

def is_vect_same_direction(v1, v2):
    return _swig_control.is_vect_same_direction(v1, v2)
is_vect_same_direction = _swig_control.is_vect_same_direction

def get_v2x_ang(p_vect):
    return _swig_control.get_v2x_ang(p_vect)
get_v2x_ang = _swig_control.get_v2x_ang
class py_spd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, py_spd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, py_spd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["spd_x"] = _swig_control.py_spd_spd_x_set
    __swig_getmethods__["spd_x"] = _swig_control.py_spd_spd_x_get
    if _newclass:
        spd_x = _swig_property(_swig_control.py_spd_spd_x_get, _swig_control.py_spd_spd_x_set)
    __swig_setmethods__["spd_y"] = _swig_control.py_spd_spd_y_set
    __swig_getmethods__["spd_y"] = _swig_control.py_spd_spd_y_get
    if _newclass:
        spd_y = _swig_property(_swig_control.py_spd_spd_y_get, _swig_control.py_spd_spd_y_set)
    __swig_setmethods__["spd_ang"] = _swig_control.py_spd_spd_ang_set
    __swig_getmethods__["spd_ang"] = _swig_control.py_spd_spd_ang_get
    if _newclass:
        spd_ang = _swig_property(_swig_control.py_spd_spd_ang_get, _swig_control.py_spd_spd_ang_set)

    def __init__(self):
        this = _swig_control.new_py_spd()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swig_control.delete_py_spd
    __del__ = lambda self: None
py_spd_swigregister = _swig_control.py_spd_swigregister
py_spd_swigregister(py_spd)

class CBasicChassis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBasicChassis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CBasicChassis, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _swig_control.new_CBasicChassis()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swig_control.delete_CBasicChassis
    __del__ = lambda self: None

    def ClearWheelSpeed(self):
        return _swig_control.CBasicChassis_ClearWheelSpeed(self)

    def UnderpanBrake(self):
        return _swig_control.CBasicChassis_UnderpanBrake(self)

    def linear_speed(self, x, y, nowAng, exp_v):
        return _swig_control.CBasicChassis_linear_speed(self, x, y, nowAng, exp_v)

    def rotate_speed(self, speed):
        return _swig_control.CBasicChassis_rotate_speed(self, speed)

    def SetMotorSpeed(self):
        return _swig_control.CBasicChassis_SetMotorSpeed(self)

    def py_getSpeed2Pub(self):
        return _swig_control.CBasicChassis_py_getSpeed2Pub(self)
CBasicChassis_swigregister = _swig_control.CBasicChassis_swigregister
CBasicChassis_swigregister(CBasicChassis)


_swig_control.CONTROL_PERIOD_MS_swigconstant(_swig_control)
CONTROL_PERIOD_MS = _swig_control.CONTROL_PERIOD_MS
class CGlobalParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGlobalParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CGlobalParam, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _swig_control.new_CGlobalParam()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["m_cur_speed"] = _swig_control.CGlobalParam_m_cur_speed_set
    __swig_getmethods__["m_cur_speed"] = _swig_control.CGlobalParam_m_cur_speed_get
    if _newclass:
        m_cur_speed = _swig_property(_swig_control.CGlobalParam_m_cur_speed_get, _swig_control.CGlobalParam_m_cur_speed_set)
    __swig_setmethods__["m_spd_vect"] = _swig_control.CGlobalParam_m_spd_vect_set
    __swig_getmethods__["m_spd_vect"] = _swig_control.CGlobalParam_m_spd_vect_get
    if _newclass:
        m_spd_vect = _swig_property(_swig_control.CGlobalParam_m_spd_vect_get, _swig_control.CGlobalParam_m_spd_vect_set)
    __swig_setmethods__["m_pos_old"] = _swig_control.CGlobalParam_m_pos_old_set
    __swig_getmethods__["m_pos_old"] = _swig_control.CGlobalParam_m_pos_old_get
    if _newclass:
        m_pos_old = _swig_property(_swig_control.CGlobalParam_m_pos_old_get, _swig_control.CGlobalParam_m_pos_old_set)
    __swig_setmethods__["m_cur_pos"] = _swig_control.CGlobalParam_m_cur_pos_set
    __swig_getmethods__["m_cur_pos"] = _swig_control.CGlobalParam_m_cur_pos_get
    if _newclass:
        m_cur_pos = _swig_property(_swig_control.CGlobalParam_m_cur_pos_get, _swig_control.CGlobalParam_m_cur_pos_set)
    __swig_setmethods__["m_mileage"] = _swig_control.CGlobalParam_m_mileage_set
    __swig_getmethods__["m_mileage"] = _swig_control.CGlobalParam_m_mileage_get
    if _newclass:
        m_mileage = _swig_property(_swig_control.CGlobalParam_m_mileage_get, _swig_control.CGlobalParam_m_mileage_set)

    def updateGlobalParam(self, x, y, ang, spd_buffer):
        return _swig_control.CGlobalParam_updateGlobalParam(self, x, y, ang, spd_buffer)

    def GetCurPosPointer(self):
        return _swig_control.CGlobalParam_GetCurPosPointer(self)

    def py_GetCurPos_copy(self):
        return _swig_control.CGlobalParam_py_GetCurPos_copy(self)

    def GetCurSpd(self):
        return _swig_control.CGlobalParam_GetCurSpd(self)

    def GetCurSpdVectPointer(self):
        return _swig_control.CGlobalParam_GetCurSpdVectPointer(self)
    __swig_destroy__ = _swig_control.delete_CGlobalParam
    __del__ = lambda self: None
CGlobalParam_swigregister = _swig_control.CGlobalParam_swigregister
CGlobalParam_swigregister(CGlobalParam)


_swig_control.FWD_CTL_PERIOD_swigconstant(_swig_control)
FWD_CTL_PERIOD = _swig_control.FWD_CTL_PERIOD
class CForwardInit_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CForwardInit_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CForwardInit_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kf"] = _swig_control.CForwardInit_t_kf_set
    __swig_getmethods__["kf"] = _swig_control.CForwardInit_t_kf_get
    if _newclass:
        kf = _swig_property(_swig_control.CForwardInit_t_kf_get, _swig_control.CForwardInit_t_kf_set)
    __swig_setmethods__["kp_aclt"] = _swig_control.CForwardInit_t_kp_aclt_set
    __swig_getmethods__["kp_aclt"] = _swig_control.CForwardInit_t_kp_aclt_get
    if _newclass:
        kp_aclt = _swig_property(_swig_control.CForwardInit_t_kp_aclt_get, _swig_control.CForwardInit_t_kp_aclt_set)
    __swig_setmethods__["kp_decr"] = _swig_control.CForwardInit_t_kp_decr_set
    __swig_getmethods__["kp_decr"] = _swig_control.CForwardInit_t_kp_decr_get
    if _newclass:
        kp_decr = _swig_property(_swig_control.CForwardInit_t_kp_decr_get, _swig_control.CForwardInit_t_kp_decr_set)
    __swig_setmethods__["kd_aclt"] = _swig_control.CForwardInit_t_kd_aclt_set
    __swig_getmethods__["kd_aclt"] = _swig_control.CForwardInit_t_kd_aclt_get
    if _newclass:
        kd_aclt = _swig_property(_swig_control.CForwardInit_t_kd_aclt_get, _swig_control.CForwardInit_t_kd_aclt_set)
    __swig_setmethods__["kd_decr"] = _swig_control.CForwardInit_t_kd_decr_set
    __swig_getmethods__["kd_decr"] = _swig_control.CForwardInit_t_kd_decr_get
    if _newclass:
        kd_decr = _swig_property(_swig_control.CForwardInit_t_kd_decr_get, _swig_control.CForwardInit_t_kd_decr_set)
    __swig_setmethods__["maxout"] = _swig_control.CForwardInit_t_maxout_set
    __swig_getmethods__["maxout"] = _swig_control.CForwardInit_t_maxout_get
    if _newclass:
        maxout = _swig_property(_swig_control.CForwardInit_t_maxout_get, _swig_control.CForwardInit_t_maxout_set)
    __swig_setmethods__["minout"] = _swig_control.CForwardInit_t_minout_set
    __swig_getmethods__["minout"] = _swig_control.CForwardInit_t_minout_get
    if _newclass:
        minout = _swig_property(_swig_control.CForwardInit_t_minout_get, _swig_control.CForwardInit_t_minout_set)
    __swig_setmethods__["route_type"] = _swig_control.CForwardInit_t_route_type_set
    __swig_getmethods__["route_type"] = _swig_control.CForwardInit_t_route_type_get
    if _newclass:
        route_type = _swig_property(_swig_control.CForwardInit_t_route_type_get, _swig_control.CForwardInit_t_route_type_set)
    __swig_setmethods__["unif_v"] = _swig_control.CForwardInit_t_unif_v_set
    __swig_getmethods__["unif_v"] = _swig_control.CForwardInit_t_unif_v_get
    if _newclass:
        unif_v = _swig_property(_swig_control.CForwardInit_t_unif_v_get, _swig_control.CForwardInit_t_unif_v_set)
    __swig_setmethods__["end_v"] = _swig_control.CForwardInit_t_end_v_set
    __swig_getmethods__["end_v"] = _swig_control.CForwardInit_t_end_v_get
    if _newclass:
        end_v = _swig_property(_swig_control.CForwardInit_t_end_v_get, _swig_control.CForwardInit_t_end_v_set)
    __swig_setmethods__["aclt"] = _swig_control.CForwardInit_t_aclt_set
    __swig_getmethods__["aclt"] = _swig_control.CForwardInit_t_aclt_get
    if _newclass:
        aclt = _swig_property(_swig_control.CForwardInit_t_aclt_get, _swig_control.CForwardInit_t_aclt_set)
    __swig_setmethods__["decr"] = _swig_control.CForwardInit_t_decr_set
    __swig_getmethods__["decr"] = _swig_control.CForwardInit_t_decr_get
    if _newclass:
        decr = _swig_property(_swig_control.CForwardInit_t_decr_get, _swig_control.CForwardInit_t_decr_set)
    __swig_setmethods__["total_len"] = _swig_control.CForwardInit_t_total_len_set
    __swig_getmethods__["total_len"] = _swig_control.CForwardInit_t_total_len_get
    if _newclass:
        total_len = _swig_property(_swig_control.CForwardInit_t_total_len_get, _swig_control.CForwardInit_t_total_len_set)
    __swig_setmethods__["start_v"] = _swig_control.CForwardInit_t_start_v_set
    __swig_getmethods__["start_v"] = _swig_control.CForwardInit_t_start_v_get
    if _newclass:
        start_v = _swig_property(_swig_control.CForwardInit_t_start_v_get, _swig_control.CForwardInit_t_start_v_set)

    def __init__(self):
        this = _swig_control.new_CForwardInit_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swig_control.delete_CForwardInit_t
    __del__ = lambda self: None
CForwardInit_t_swigregister = _swig_control.CForwardInit_t_swigregister
CForwardInit_t_swigregister(CForwardInit_t)

class CForwardCtl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CForwardCtl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CForwardCtl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_control.new_CForwardCtl(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swig_control.delete_CForwardCtl
    __del__ = lambda self: None

    def getStartTime(self):
        return _swig_control.CForwardCtl_getStartTime(self)

    def getEndTime(self):
        return _swig_control.CForwardCtl_getEndTime(self)

    def getMaxOut(self):
        return _swig_control.CForwardCtl_getMaxOut(self)

    def getMinOut(self):
        return _swig_control.CForwardCtl_getMinOut(self)

    def getCurPosCmd(self):
        return _swig_control.CForwardCtl_getCurPosCmd(self)

    def update_forward_param(self, param):
        return _swig_control.CForwardCtl_update_forward_param(self, param)

    def update_forward_ctl(self, param):
        return _swig_control.CForwardCtl_update_forward_ctl(self, param)

    def forward_ctl(self, current_pos):
        return _swig_control.CForwardCtl_forward_ctl(self, current_pos)
CForwardCtl_swigregister = _swig_control.CForwardCtl_swigregister
CForwardCtl_swigregister(CForwardCtl)

class CRotateForwardCtl(CForwardCtl):
    __swig_setmethods__ = {}
    for _s in [CForwardCtl]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRotateForwardCtl, name, value)
    __swig_getmethods__ = {}
    for _s in [CForwardCtl]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRotateForwardCtl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_start_ang"] = _swig_control.CRotateForwardCtl_m_start_ang_set
    __swig_getmethods__["m_start_ang"] = _swig_control.CRotateForwardCtl_m_start_ang_get
    if _newclass:
        m_start_ang = _swig_property(_swig_control.CRotateForwardCtl_m_start_ang_get, _swig_control.CRotateForwardCtl_m_start_ang_set)
    __swig_setmethods__["m_end_ang"] = _swig_control.CRotateForwardCtl_m_end_ang_set
    __swig_getmethods__["m_end_ang"] = _swig_control.CRotateForwardCtl_m_end_ang_get
    if _newclass:
        m_end_ang = _swig_property(_swig_control.CRotateForwardCtl_m_end_ang_get, _swig_control.CRotateForwardCtl_m_end_ang_set)
    __swig_setmethods__["m_dir"] = _swig_control.CRotateForwardCtl_m_dir_set
    __swig_getmethods__["m_dir"] = _swig_control.CRotateForwardCtl_m_dir_get
    if _newclass:
        m_dir = _swig_property(_swig_control.CRotateForwardCtl_m_dir_get, _swig_control.CRotateForwardCtl_m_dir_set)

    def __init__(self, param, start_time, end_time, start_ang, end_ang):
        this = _swig_control.new_CRotateForwardCtl(param, start_time, end_time, start_ang, end_ang)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def rotate_ForwardCtl_init(self, param, start_time, end_time, start_ang, end_ang):
        return _swig_control.CRotateForwardCtl_rotate_ForwardCtl_init(self, param, start_time, end_time, start_ang, end_ang)

    def forward_ctl(self, current_pos):
        return _swig_control.CRotateForwardCtl_forward_ctl(self, current_pos)

    def update_forward_param(self, param):
        return _swig_control.CRotateForwardCtl_update_forward_param(self, param)
    __swig_destroy__ = _swig_control.delete_CRotateForwardCtl
    __del__ = lambda self: None
CRotateForwardCtl_swigregister = _swig_control.CRotateForwardCtl_swigregister
CRotateForwardCtl_swigregister(CRotateForwardCtl)

class PidInit_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PidInit_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PidInit_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["set_value"] = _swig_control.PidInit_t_set_value_set
    __swig_getmethods__["set_value"] = _swig_control.PidInit_t_set_value_get
    if _newclass:
        set_value = _swig_property(_swig_control.PidInit_t_set_value_get, _swig_control.PidInit_t_set_value_set)
    __swig_setmethods__["Kp"] = _swig_control.PidInit_t_Kp_set
    __swig_getmethods__["Kp"] = _swig_control.PidInit_t_Kp_get
    if _newclass:
        Kp = _swig_property(_swig_control.PidInit_t_Kp_get, _swig_control.PidInit_t_Kp_set)
    __swig_setmethods__["Ki"] = _swig_control.PidInit_t_Ki_set
    __swig_getmethods__["Ki"] = _swig_control.PidInit_t_Ki_get
    if _newclass:
        Ki = _swig_property(_swig_control.PidInit_t_Ki_get, _swig_control.PidInit_t_Ki_set)
    __swig_setmethods__["Kd"] = _swig_control.PidInit_t_Kd_set
    __swig_getmethods__["Kd"] = _swig_control.PidInit_t_Kd_get
    if _newclass:
        Kd = _swig_property(_swig_control.PidInit_t_Kd_get, _swig_control.PidInit_t_Kd_set)
    __swig_setmethods__["max_out"] = _swig_control.PidInit_t_max_out_set
    __swig_getmethods__["max_out"] = _swig_control.PidInit_t_max_out_get
    if _newclass:
        max_out = _swig_property(_swig_control.PidInit_t_max_out_get, _swig_control.PidInit_t_max_out_set)
    __swig_setmethods__["min_out"] = _swig_control.PidInit_t_min_out_set
    __swig_getmethods__["min_out"] = _swig_control.PidInit_t_min_out_get
    if _newclass:
        min_out = _swig_property(_swig_control.PidInit_t_min_out_get, _swig_control.PidInit_t_min_out_set)
    __swig_setmethods__["iteg_max"] = _swig_control.PidInit_t_iteg_max_set
    __swig_getmethods__["iteg_max"] = _swig_control.PidInit_t_iteg_max_get
    if _newclass:
        iteg_max = _swig_property(_swig_control.PidInit_t_iteg_max_get, _swig_control.PidInit_t_iteg_max_set)
    __swig_setmethods__["dead_zone"] = _swig_control.PidInit_t_dead_zone_set
    __swig_getmethods__["dead_zone"] = _swig_control.PidInit_t_dead_zone_get
    if _newclass:
        dead_zone = _swig_property(_swig_control.PidInit_t_dead_zone_get, _swig_control.PidInit_t_dead_zone_set)

    def __init__(self):
        this = _swig_control.new_PidInit_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swig_control.delete_PidInit_t
    __del__ = lambda self: None
PidInit_t_swigregister = _swig_control.PidInit_t_swigregister
PidInit_t_swigregister(PidInit_t)

class CPid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPid, name)
    __repr__ = _swig_repr

    def __init__(self, param):
        this = _swig_control.new_CPid(param)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swig_control.delete_CPid
    __del__ = lambda self: None

    def set_target_value(self, target_value):
        return _swig_control.CPid_set_target_value(self, target_value)

    def update_pid_param(self, param):
        return _swig_control.CPid_update_pid_param(self, param)

    def pid_calc(self, real_value):
        return _swig_control.CPid_pid_calc(self, real_value)
CPid_swigregister = _swig_control.CPid_swigregister
CPid_swigregister(CPid)


_swig_control.ROUTE_LINE_swigconstant(_swig_control)
ROUTE_LINE = _swig_control.ROUTE_LINE

_swig_control.ROUTE_ANTI_CLK_swigconstant(_swig_control)
ROUTE_ANTI_CLK = _swig_control.ROUTE_ANTI_CLK

_swig_control.ROUTE_CLK_swigconstant(_swig_control)
ROUTE_CLK = _swig_control.ROUTE_CLK

_swig_control.ROUTE_ROTATE_swigconstant(_swig_control)
ROUTE_ROTATE = _swig_control.ROUTE_ROTATE
class RouteControlInit_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouteControlInit_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RouteControlInit_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["route_type"] = _swig_control.RouteControlInit_t_route_type_set
    __swig_getmethods__["route_type"] = _swig_control.RouteControlInit_t_route_type_get
    if _newclass:
        route_type = _swig_property(_swig_control.RouteControlInit_t_route_type_get, _swig_control.RouteControlInit_t_route_type_set)
    __swig_setmethods__["start_point"] = _swig_control.RouteControlInit_t_start_point_set
    __swig_getmethods__["start_point"] = _swig_control.RouteControlInit_t_start_point_get
    if _newclass:
        start_point = _swig_property(_swig_control.RouteControlInit_t_start_point_get, _swig_control.RouteControlInit_t_start_point_set)
    __swig_setmethods__["end_point"] = _swig_control.RouteControlInit_t_end_point_set
    __swig_getmethods__["end_point"] = _swig_control.RouteControlInit_t_end_point_get
    if _newclass:
        end_point = _swig_property(_swig_control.RouteControlInit_t_end_point_get, _swig_control.RouteControlInit_t_end_point_set)
    __swig_setmethods__["center"] = _swig_control.RouteControlInit_t_center_set
    __swig_getmethods__["center"] = _swig_control.RouteControlInit_t_center_get
    if _newclass:
        center = _swig_property(_swig_control.RouteControlInit_t_center_get, _swig_control.RouteControlInit_t_center_set)
    __swig_setmethods__["forward_init"] = _swig_control.RouteControlInit_t_forward_init_set
    __swig_getmethods__["forward_init"] = _swig_control.RouteControlInit_t_forward_init_get
    if _newclass:
        forward_init = _swig_property(_swig_control.RouteControlInit_t_forward_init_get, _swig_control.RouteControlInit_t_forward_init_set)
    __swig_setmethods__["rotate_forward_init"] = _swig_control.RouteControlInit_t_rotate_forward_init_set
    __swig_getmethods__["rotate_forward_init"] = _swig_control.RouteControlInit_t_rotate_forward_init_get
    if _newclass:
        rotate_forward_init = _swig_property(_swig_control.RouteControlInit_t_rotate_forward_init_get, _swig_control.RouteControlInit_t_rotate_forward_init_set)
    __swig_setmethods__["lock_pid_init"] = _swig_control.RouteControlInit_t_lock_pid_init_set
    __swig_getmethods__["lock_pid_init"] = _swig_control.RouteControlInit_t_lock_pid_init_get
    if _newclass:
        lock_pid_init = _swig_property(_swig_control.RouteControlInit_t_lock_pid_init_get, _swig_control.RouteControlInit_t_lock_pid_init_set)

    def __init__(self):
        this = _swig_control.new_RouteControlInit_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swig_control.delete_RouteControlInit_t
    __del__ = lambda self: None
RouteControlInit_t_swigregister = _swig_control.RouteControlInit_t_swigregister
RouteControlInit_t_swigregister(RouteControlInit_t)

class CRouteControl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRouteControl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRouteControl, name)
    __repr__ = _swig_repr

    def __init__(self, init_t, car, globalParam):
        this = _swig_control.new_CRouteControl(init_t, car, globalParam)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swig_control.delete_CRouteControl
    __del__ = lambda self: None

    def update_line(self):
        return _swig_control.CRouteControl_update_line(self)

    def update_arc(self):
        return _swig_control.CRouteControl_update_arc(self)

    def lock_line_ctl(self):
        return _swig_control.CRouteControl_lock_line_ctl(self)

    def lock_arc_ctl(self):
        return _swig_control.CRouteControl_lock_arc_ctl(self)

    def control_line(self):
        return _swig_control.CRouteControl_control_line(self)

    def control_arc(self):
        return _swig_control.CRouteControl_control_arc(self)

    def control_rotate(self):
        return _swig_control.CRouteControl_control_rotate(self)

    def go(self):
        return _swig_control.CRouteControl_go(self)

    def py_GetEndTime(self):
        return _swig_control.CRouteControl_py_GetEndTime(self)
CRouteControl_swigregister = _swig_control.CRouteControl_swigregister
CRouteControl_swigregister(CRouteControl)

# This file is compatible with both classic and new-style classes.


